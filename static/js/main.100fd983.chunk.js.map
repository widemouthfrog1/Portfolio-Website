{"version":3,"sources":["gameObjects/Tile.js","gameObjects/Board.js","gameObjects/Game.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","className","onClick","value","Board","x","y","this","tiles","renderTile","React","Component","calculateWinner","i","length","colWin","rowWin","diagWin","col","row","increasing","count","Game","state","history","Array","fill","map","stepNumber","xTurn","status","current","winner","moves","step","move","desc","key","jumpTo","handleClick","slice","push","setState","concat","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.100fd983.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Tile.css\";\r\n\r\nfunction Tile(props) {\r\n  return (\r\n    <button className=\"tile\" onClick={() => props.onClick()}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Tile;\r\n","import React from \"react\";\r\nimport Tile from \"./Tile\";\r\nimport \"./Board.css\";\r\n\r\nclass Board extends React.Component {\r\n  renderTile(x, y) {\r\n    return (\r\n      <Tile\r\n        value={this.props.tiles[x][y]}\r\n        onClick={() => this.props.onClick(x, y)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"board-rows\">\r\n        <div className=\"board-row\">\r\n          {this.renderTile(0, 2)}\r\n          {this.renderTile(1, 2)}\r\n          {this.renderTile(2, 2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderTile(0, 1)}\r\n          {this.renderTile(1, 1)}\r\n          {this.renderTile(2, 1)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderTile(0, 0)}\r\n          {this.renderTile(1, 0)}\r\n          {this.renderTile(2, 0)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport Board from \"./Board\";\r\nimport \"./Game.css\";\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          tiles: Array(3)\r\n            .fill(0)\r\n            .map((row) => new Array(3).fill(null)),\r\n        },\r\n      ],\r\n      stepNumber: 0,\r\n      xTurn: true,\r\n    };\r\n  }\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.tiles);\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ? \"Go to move #\" + move : \"Go to start\";\r\n      if (this.state.stepNumber !== move) {\r\n        return (\r\n          <li key={move}>\r\n            <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n          </li>\r\n        );\r\n      } else {\r\n        return;\r\n      }\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else {\r\n      status = (this.state.xTurn ? \"X\" : \"O\") + \" to move\";\r\n    }\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"title\">Tic-Tac-Toe</div>\r\n        <div className=\"game-content\">\r\n          <div className=\"game-board\">\r\n            <Board\r\n              tiles={current.tiles}\r\n              onClick={(x, y) => this.handleClick(x, y)}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleClick(x, y) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    let tiles = [];\r\n    for (let i = 0; i < current.tiles.length; i++) {\r\n      tiles.push(current.tiles[i].slice());\r\n    }\r\n    if (calculateWinner(tiles) || tiles[x][y]) {\r\n      return;\r\n    }\r\n    tiles[x][y] = this.state.xTurn ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([{ tiles: tiles }]),\r\n      stepNumber: history.length,\r\n      xTurn: !this.state.xTurn,\r\n    });\r\n  }\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xTurn: step % 2 === 0,\r\n    });\r\n  }\r\n}\r\n\r\nfunction calculateWinner(tiles) {\r\n  for (let i = 0; i < tiles.length; i++) {\r\n    if (colWin(i, tiles)) {\r\n      return tiles[i][0];\r\n    }\r\n    if (rowWin(i, tiles)) {\r\n      return tiles[0][i];\r\n    }\r\n  }\r\n  for (let x = 0; x < tiles.length; x++) {\r\n    for (let y = 0; y < tiles[x].length; y++) {\r\n      if (diagWin(x, y, true, 3, tiles)) {\r\n        return tiles[x][y];\r\n      }\r\n      if (diagWin(x, y, false, 3, tiles)) {\r\n        return tiles[x][y];\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\nfunction colWin(col, tiles) {\r\n  let value = null;\r\n  value = tiles[col][0];\r\n  if (value === null) {\r\n    return false;\r\n  }\r\n  for (let i = 1; i < tiles[col].length; i++) {\r\n    if (tiles[col][i] !== value) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction rowWin(row, tiles) {\r\n  let value = tiles[0][row];\r\n  if (value === null) {\r\n    return false;\r\n  }\r\n  for (let i = 1; i < tiles.length; i++) {\r\n    if (tiles[i][row] !== value) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction diagWin(x, y, increasing, count, tiles) {\r\n  let value = tiles[x][y];\r\n  if (value === null) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < count; i++) {\r\n    if (\r\n      x + i === tiles.length ||\r\n      x + i < 0 ||\r\n      y + (increasing ? i : -i) === tiles[x].length ||\r\n      y + (increasing ? i : -i) < 0 ||\r\n      tiles[x + i][y + (increasing ? i : -i)] !== value\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Game from \"./gameObjects/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Game />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}